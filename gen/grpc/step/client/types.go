// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step gRPC client types
//
// Command:
// $ goa gen guide.me/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	steppb "guide.me/gen/grpc/step/pb"
	step "guide.me/gen/step"
	stepviews "guide.me/gen/step/views"
)

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "step" service.
func NewListRequest(payload *step.ListPayload) *steppb.ListRequest {
	message := &steppb.ListRequest{
		Id: payload.ID,
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "step"
// service from the gRPC response type.
func NewListResult(message *steppb.ListResponse) *stepviews.StoredListOfStepsView {
	result := &stepviews.StoredListOfStepsView{
		WtID: &message.WtId,
	}
	if message.Steps != nil {
		result.Steps = make([]*stepviews.StoredStepView, len(message.Steps))
		for i, val := range message.Steps {
			result.Steps[i] = &stepviews.StoredStepView{
				ID:         &val.Id,
				Title:      &val.Title,
				Target:     &val.Target,
				StepNumber: &val.StepNumber,
				Content:    &val.Content,
			}
			if val.Placement != "" {
				result.Steps[i].Placement = &val.Placement
			}
			if val.Action != "" {
				result.Steps[i].Action = &val.Action
			}
			if val.Placement == "" {
				var tmp string = "right"
				result.Steps[i].Placement = &tmp
			}
			if val.Action == "" {
				var tmp string = "next"
				result.Steps[i].Action = &tmp
			}
		}
	}
	return result
}

// NewAddRequest builds the gRPC request type from the payload of the "add"
// endpoint of the "step" service.
func NewAddRequest(payload *step.AddStepPayload) *steppb.AddRequest {
	message := &steppb.AddRequest{}
	if payload.WtID != nil {
		message.WtId = *payload.WtID
	}
	if payload.Step != nil {
		message.Step = svcStepStepToSteppbStep1(payload.Step)
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "step"
// service from the gRPC response type.
func NewAddResult(message *steppb.AddResponse) *stepviews.ResultStepView {
	result := &stepviews.ResultStepView{
		WtID: &message.WtId,
	}
	if message.Step != nil {
		result.Step = protobufSteppbStoredStepToStepviewsStoredStepView(message.Step)
	}
	return result
}

// NewRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "step" service.
func NewRemoveRequest(payload *step.RemovePayload) *steppb.RemoveRequest {
	message := &steppb.RemoveRequest{
		WtId: payload.WtID,
		Id:   payload.ID,
	}
	return message
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "step" service.
func NewUpdateRequest(payload *step.StoredListOfSteps) *steppb.UpdateRequest {
	message := &steppb.UpdateRequest{
		WtId: payload.WtID,
	}
	if payload.Steps != nil {
		message.Steps = make([]*steppb.StoredStep, len(payload.Steps))
		for i, val := range payload.Steps {
			message.Steps[i] = &steppb.StoredStep{
				Id:         val.ID,
				Title:      val.Title,
				Target:     val.Target,
				StepNumber: val.StepNumber,
				Placement:  val.Placement,
				Content:    val.Content,
				Action:     val.Action,
			}
		}
	}
	return message
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *steppb.ListResponse) (err error) {
	if message.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "message"))
	}
	for _, e := range message.Steps {
		if e != nil {
			if err2 := ValidateStoredStep(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredStep runs the validations defined on StoredStep.
func ValidateStoredStep(message *steppb.StoredStep) (err error) {
	if message.Placement != "" {
		if !(message.Placement == "left" || message.Placement == "right" || message.Placement == "top" || message.Placement == "buttom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.placement", message.Placement, []interface{}{"left", "right", "top", "buttom"}))
		}
	}
	if message.Action != "" {
		if !(message.Action == "click" || message.Action == "next" || message.Action == "end") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"click", "next", "end"}))
		}
	}
	return
}

// ValidateAddResponse runs the validations defined on AddResponse.
func ValidateAddResponse(message *steppb.AddResponse) (err error) {
	if message.Step == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("step", "message"))
	}
	if message.Step != nil {
		if err2 := ValidateStoredStep(message.Step); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// protobufSteppbStep1ToStepStep builds a value of type *step.Step from a value
// of type *steppb.Step1.
func protobufSteppbStep1ToStepStep(v *steppb.Step1) *step.Step {
	if v == nil {
		return nil
	}
	res := &step.Step{
		Title:      v.Title,
		Target:     v.Target,
		StepNumber: v.StepNumber,
		Placement:  v.Placement,
		Content:    v.Content,
		Action:     v.Action,
	}

	return res
}

// svcStepStepToSteppbStep1 builds a value of type *steppb.Step1 from a value
// of type *step.Step.
func svcStepStepToSteppbStep1(v *step.Step) *steppb.Step1 {
	if v == nil {
		return nil
	}
	res := &steppb.Step1{
		Title:      v.Title,
		Target:     v.Target,
		StepNumber: v.StepNumber,
		Placement:  v.Placement,
		Content:    v.Content,
		Action:     v.Action,
	}

	return res
}

// svcStepviewsStoredStepViewToSteppbStoredStep builds a value of type
// *steppb.StoredStep from a value of type *stepviews.StoredStepView.
func svcStepviewsStoredStepViewToSteppbStoredStep(v *stepviews.StoredStepView) *steppb.StoredStep {
	res := &steppb.StoredStep{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Title != nil {
		res.Title = *v.Title
	}
	if v.Target != nil {
		res.Target = *v.Target
	}
	if v.StepNumber != nil {
		res.StepNumber = *v.StepNumber
	}
	if v.Placement != nil {
		res.Placement = *v.Placement
	}
	if v.Content != nil {
		res.Content = *v.Content
	}
	if v.Action != nil {
		res.Action = *v.Action
	}
	if v.Placement == nil {
		res.Placement = "right"
	}
	if v.Action == nil {
		res.Action = "next"
	}

	return res
}

// protobufSteppbStoredStepToStepviewsStoredStepView builds a value of type
// *stepviews.StoredStepView from a value of type *steppb.StoredStep.
func protobufSteppbStoredStepToStepviewsStoredStepView(v *steppb.StoredStep) *stepviews.StoredStepView {
	res := &stepviews.StoredStepView{
		ID:         &v.Id,
		Title:      &v.Title,
		Target:     &v.Target,
		StepNumber: &v.StepNumber,
		Placement:  &v.Placement,
		Content:    &v.Content,
		Action:     &v.Action,
	}

	return res
}
