// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step gRPC client types
//
// Command:
// $ goa gen guide.me/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	steppb "guide.me/gen/grpc/step/pb"
	step "guide.me/gen/step"
	stepviews "guide.me/gen/step/views"
)

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "step" service.
func NewListRequest(payload *step.ListPayload) *steppb.ListRequest {
	message := &steppb.ListRequest{
		Id: payload.ID,
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "step"
// service from the gRPC response type.
func NewListResult(message *steppb.ListResponse) *stepviews.StoredStepsView {
	result := &stepviews.StoredStepsView{
		ID:   &message.Id,
		WtID: &message.WtId,
	}
	if message.Steps != nil {
		result.Steps = make([]*stepviews.StepView, len(message.Steps))
		for i, val := range message.Steps {
			result.Steps[i] = &stepviews.StepView{
				Targetid: &val.Targetid,
				Type:     &val.Type,
				Value:    &val.Value,
				Sequence: &val.Sequence,
				Action:   &val.Action,
			}
		}
	}
	return result
}

// NewAddRequest builds the gRPC request type from the payload of the "add"
// endpoint of the "step" service.
func NewAddRequest(payload *step.Steps) *steppb.AddRequest {
	message := &steppb.AddRequest{}
	if payload.WtID != nil {
		message.WtId = *payload.WtID
	}
	if payload.Steps != nil {
		message.Steps = make([]*steppb.Step1, len(payload.Steps))
		for i, val := range payload.Steps {
			message.Steps[i] = &steppb.Step1{
				Targetid: val.Targetid,
				Type:     val.Type,
				Value:    val.Value,
				Sequence: val.Sequence,
				Action:   val.Action,
			}
		}
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "step"
// service from the gRPC response type.
func NewAddResult(message *steppb.AddResponse) string {
	result := message.Field
	return result
}

// NewRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "step" service.
func NewRemoveRequest(payload *step.RemovePayload) *steppb.RemoveRequest {
	message := &steppb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "step" service.
func NewUpdateRequest(payload *step.StoredSteps) *steppb.UpdateRequest {
	message := &steppb.UpdateRequest{
		Id:   payload.ID,
		WtId: payload.WtID,
	}
	if payload.Steps != nil {
		message.Steps = make([]*steppb.Step1, len(payload.Steps))
		for i, val := range payload.Steps {
			message.Steps[i] = &steppb.Step1{
				Targetid: val.Targetid,
				Type:     val.Type,
				Value:    val.Value,
				Sequence: val.Sequence,
				Action:   val.Action,
			}
		}
	}
	return message
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *steppb.ListResponse) (err error) {
	if message.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "message"))
	}
	for _, e := range message.Steps {
		if e != nil {
			if err2 := ValidateStep1(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStep1 runs the validations defined on Step1.
func ValidateStep1(message *steppb.Step1) (err error) {
	if !(message.Type == "text" || message.Type == "picture") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.type", message.Type, []interface{}{"text", "picture"}))
	}
	if !(message.Action == "click" || message.Action == "next" || message.Action == "end") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"click", "next", "end"}))
	}
	return
}
