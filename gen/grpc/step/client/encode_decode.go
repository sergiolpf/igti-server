// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step gRPC client encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	steppb "guide.me/gen/grpc/step/pb"
	step "guide.me/gen/step"
	stepviews "guide.me/gen/step/views"
)

// BuildListFunc builds the remote method to invoke for "step" service "list"
// endpoint.
func BuildListFunc(grpccli steppb.StepClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*steppb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &steppb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to step list endpoint.
func EncodeListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*step.ListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "list", "*step.ListPayload", v)
	}
	return NewListRequest(payload), nil
}

// DecodeListResponse decodes responses from the step list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*steppb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "list", "*steppb.ListResponse", v)
	}
	res := NewListResult(message)
	vres := &stepviews.StoredListOfSteps{Projected: res, View: view}
	if err := stepviews.ValidateStoredListOfSteps(vres); err != nil {
		return nil, err
	}
	return step.NewStoredListOfSteps(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "step" service "add"
// endpoint.
func BuildAddFunc(grpccli steppb.StepClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*steppb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &steppb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to step add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*step.AddStepPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "add", "*step.AddStepPayload", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the step add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*steppb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "add", "*steppb.AddResponse", v)
	}
	res := NewAddResult(message)
	vres := &stepviews.ResultStep{Projected: res, View: view}
	if err := stepviews.ValidateResultStep(vres); err != nil {
		return nil, err
	}
	return step.NewResultStep(vres), nil
}

// BuildRemoveFunc builds the remote method to invoke for "step" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli steppb.StepClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*steppb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &steppb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to step remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*step.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "remove", "*step.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}

// BuildUpdateFunc builds the remote method to invoke for "step" service
// "update" endpoint.
func BuildUpdateFunc(grpccli steppb.StepClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*steppb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &steppb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to step update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*step.StoredListOfSteps)
	if !ok {
		return nil, goagrpc.ErrInvalidType("step", "update", "*step.StoredListOfSteps", v)
	}
	return NewUpdateRequest(payload), nil
}
