// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step gRPC client CLI support package
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
	steppb "guide.me/gen/grpc/step/pb"
	step "guide.me/gen/step"
)

// BuildListPayload builds the payload for the step list endpoint from CLI
// flags.
func BuildListPayload(stepListMessage string) (*step.ListPayload, error) {
	var err error
	var message steppb.ListRequest
	{
		if stepListMessage != "" {
			err = json.Unmarshal([]byte(stepListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Incidunt quo.\"\n   }'")
			}
		}
	}
	v := &step.ListPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildShowPayload builds the payload for the step show endpoint from CLI
// flags.
func BuildShowPayload(stepShowMessage string, stepShowView string) (*step.ShowPayload, error) {
	var err error
	var message steppb.ShowRequest
	{
		if stepShowMessage != "" {
			err = json.Unmarshal([]byte(stepShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Ipsum ratione eum.\"\n   }'")
			}
		}
	}
	var view *string
	{
		if stepShowView != "" {
			view = &stepShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &step.ShowPayload{
		ID: message.Id,
	}
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the step add endpoint from CLI flags.
func BuildAddPayload(stepAddMessage string) (*step.Walkthrough, error) {
	var err error
	var message steppb.AddRequest
	{
		if stepAddMessage != "" {
			err = json.Unmarshal([]byte(stepAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"baseURL\": \"http://www.google.com/\",\n      \"name\": \"How to create a new process using the exception condition.\",\n      \"organization\": \"Quia fugiat et delectus quo.\",\n      \"publishedURL\": \"Voluptates occaecati aliquid veniam ipsa in.\",\n      \"status\": \"draft | published\"\n   }'")
			}
		}
	}
	v := &step.Walkthrough{
		Name:         message.Name,
		BaseURL:      message.BaseUrl,
		Status:       message.Status,
		Organization: message.Organization,
	}
	if message.PublishedUrl != "" {
		v.PublishedURL = &message.PublishedUrl
	}
	if message.Status == "" {
		v.Status = "draft"
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the step remove endpoint from CLI
// flags.
func BuildRemovePayload(stepRemoveMessage string) (*step.RemovePayload, error) {
	var err error
	var message steppb.RemoveRequest
	{
		if stepRemoveMessage != "" {
			err = json.Unmarshal([]byte(stepRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Aut aliquid et.\"\n   }'")
			}
		}
	}
	v := &step.RemovePayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the step update endpoint from CLI
// flags.
func BuildUpdatePayload(stepUpdateMessage string) (*step.StoredWalkthrough, error) {
	var err error
	var message steppb.UpdateRequest
	{
		if stepUpdateMessage != "" {
			err = json.Unmarshal([]byte(stepUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"baseURL\": \"http://www.google.com/\",\n      \"id\": \"123abc\",\n      \"name\": \"How to create a new process using the exception condition.\",\n      \"organization\": \"Rerum harum.\",\n      \"publishedURL\": \"Dolor incidunt.\",\n      \"status\": \"draft | published\"\n   }'")
			}
		}
	}
	v := &step.StoredWalkthrough{
		ID:           message.Id,
		Name:         message.Name,
		BaseURL:      message.BaseUrl,
		Status:       message.Status,
		Organization: message.Organization,
	}
	if message.PublishedUrl != "" {
		v.PublishedURL = &message.PublishedUrl
	}
	if message.Status == "" {
		v.Status = "draft"
	}

	return v, nil
}

// BuildPublishPayload builds the payload for the step publish endpoint from
// CLI flags.
func BuildPublishPayload(stepPublishMessage string) (*step.PublishPayload, error) {
	var err error
	var message steppb.PublishRequest
	{
		if stepPublishMessage != "" {
			err = json.Unmarshal([]byte(stepPublishMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": \"Et consequuntur doloremque et.\"\n   }'")
			}
		}
	}
	v := &step.PublishPayload{
		ID: message.Id,
	}

	return v, nil
}
