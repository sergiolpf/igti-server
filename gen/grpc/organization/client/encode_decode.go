// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization gRPC client encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	organizationpb "guide.me/gen/grpc/organization/pb"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// BuildListFunc builds the remote method to invoke for "organization" service
// "list" endpoint.
func BuildListFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*organizationpb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &organizationpb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the organization list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*organizationpb.StoredOrganizationCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "list", "*organizationpb.StoredOrganizationCollection", v)
	}
	res := NewListResult(message)
	vres := organizationviews.StoredOrganizationCollection{Projected: res, View: view}
	if err := organizationviews.ValidateStoredOrganizationCollection(vres); err != nil {
		return nil, err
	}
	return organization.NewStoredOrganizationCollection(vres), nil
}

// BuildShowFunc builds the remote method to invoke for "organization" service
// "show" endpoint.
func BuildShowFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Show(ctx, reqpb.(*organizationpb.ShowRequest), opts...)
		}
		return grpccli.Show(ctx, &organizationpb.ShowRequest{}, opts...)
	}
}

// EncodeShowRequest encodes requests sent to organization show endpoint.
func EncodeShowRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*organization.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "show", "*organization.ShowPayload", v)
	}
	if payload.View != nil {
		(*md).Append("view", *payload.View)
	}
	return NewShowRequest(payload), nil
}

// DecodeShowResponse decodes responses from the organization show endpoint.
func DecodeShowResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*organizationpb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "show", "*organizationpb.ShowResponse", v)
	}
	res := NewShowResult(message)
	vres := &organizationviews.StoredOrganization{Projected: res, View: view}
	if err := organizationviews.ValidateStoredOrganization(vres); err != nil {
		return nil, err
	}
	return organization.NewStoredOrganization(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "organization" service
// "add" endpoint.
func BuildAddFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*organizationpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &organizationpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to organization add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*organization.Organization)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "add", "*organization.Organization", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the organization add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*organizationpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "add", "*organizationpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "organization"
// service "remove" endpoint.
func BuildRemoveFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*organizationpb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &organizationpb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to organization remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*organization.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "remove", "*organization.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}

// BuildMultiAddFunc builds the remote method to invoke for "organization"
// service "multi_add" endpoint.
func BuildMultiAddFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MultiAdd(ctx, reqpb.(*organizationpb.MultiAddRequest), opts...)
		}
		return grpccli.MultiAdd(ctx, &organizationpb.MultiAddRequest{}, opts...)
	}
}

// EncodeMultiAddRequest encodes requests sent to organization multi_add
// endpoint.
func EncodeMultiAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]*organization.Organization)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "multi_add", "[]*organization.Organization", v)
	}
	return NewMultiAddRequest(payload), nil
}

// DecodeMultiAddResponse decodes responses from the organization multi_add
// endpoint.
func DecodeMultiAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*organizationpb.MultiAddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "multi_add", "*organizationpb.MultiAddResponse", v)
	}
	res := NewMultiAddResult(message)
	return res, nil
}

// BuildMultiUpdateFunc builds the remote method to invoke for "organization"
// service "multi_update" endpoint.
func BuildMultiUpdateFunc(grpccli organizationpb.OrganizationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MultiUpdate(ctx, reqpb.(*organizationpb.MultiUpdateRequest), opts...)
		}
		return grpccli.MultiUpdate(ctx, &organizationpb.MultiUpdateRequest{}, opts...)
	}
}

// EncodeMultiUpdateRequest encodes requests sent to organization multi_update
// endpoint.
func EncodeMultiUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*organization.MultiUpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "multi_update", "*organization.MultiUpdatePayload", v)
	}
	return NewMultiUpdateRequest(payload), nil
}
