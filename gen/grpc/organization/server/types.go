// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization gRPC server types
//
// Command:
// $ goa gen guide.me/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	organizationpb "guide.me/gen/grpc/organization/pb"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// NewStoredOrganizationCollection builds the gRPC response type from the
// result of the "list" endpoint of the "organization" service.
func NewStoredOrganizationCollection(result organizationviews.StoredOrganizationCollectionView) *organizationpb.StoredOrganizationCollection {
	message := &organizationpb.StoredOrganizationCollection{}
	message.Field = make([]*organizationpb.StoredOrganization, len(result))
	for i, val := range result {
		message.Field[i] = &organizationpb.StoredOrganization{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.URL != nil {
			message.Field[i].Url = *val.URL
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the
// "organization" service from the gRPC request type.
func NewShowPayload(message *organizationpb.ShowRequest, view *string) *organization.ShowPayload {
	v := &organization.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v
}

// NewShowResponse builds the gRPC response type from the result of the "show"
// endpoint of the "organization" service.
func NewShowResponse(result *organizationviews.StoredOrganizationView) *organizationpb.ShowResponse {
	message := &organizationpb.ShowResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.URL != nil {
		message.Url = *result.URL
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "organization" service.
func NewShowNotFoundError(er *organization.ElementNotFound) *organizationpb.ShowNotFoundError {
	message := &organizationpb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "organization"
// service from the gRPC request type.
func NewAddPayload(message *organizationpb.AddRequest) *organization.Organization {
	v := &organization.Organization{
		Name: message.Name,
		URL:  message.Url,
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "organization" service.
func NewAddResponse(result string) *organizationpb.AddResponse {
	message := &organizationpb.AddResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the
// "organization" service from the gRPC request type.
func NewRemovePayload(message *organizationpb.RemoveRequest) *organization.RemovePayload {
	v := &organization.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "organization" service.
func NewRemoveResponse() *organizationpb.RemoveResponse {
	message := &organizationpb.RemoveResponse{}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "organization" service from the gRPC request type.
func NewUpdatePayload(message *organizationpb.UpdateRequest) *organization.StoredOrganization {
	v := &organization.StoredOrganization{
		ID:   message.Id,
		Name: message.Name,
		URL:  message.Url,
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "organization" service.
func NewUpdateResponse() *organizationpb.UpdateResponse {
	message := &organizationpb.UpdateResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *organizationpb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 200, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.url", message.Url, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *organizationpb.UpdateRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 200, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.url", message.Url, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	return
}
