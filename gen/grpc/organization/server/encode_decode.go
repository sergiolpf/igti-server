// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization gRPC server encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package server

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
	organizationpb "guide.me/gen/grpc/organization/pb"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// EncodeListResponse encodes responses from the "organization" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(organizationviews.StoredOrganizationCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "list", "organizationviews.StoredOrganizationCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewStoredOrganizationCollection(result)
	return resp, nil
}

// EncodeShowResponse encodes responses from the "organization" service "show"
// endpoint.
func EncodeShowResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*organizationviews.StoredOrganization)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "show", "*organizationviews.StoredOrganization", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewShowResponse(result)
	return resp, nil
}

// DecodeShowRequest decodes requests sent to "organization" service "show"
// endpoint.
func DecodeShowRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		view *string
		err  error
	)
	{
		if vals := md.Get("view"); len(vals) > 0 {
			view = &vals[0]
		}
		if view != nil {
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *organizationpb.ShowRequest
		ok      bool
	)
	{
		if message, ok = v.(*organizationpb.ShowRequest); !ok {
			return nil, goagrpc.ErrInvalidType("organization", "show", "*organizationpb.ShowRequest", v)
		}
	}
	var payload *organization.ShowPayload
	{
		payload = NewShowPayload(message, view)
	}
	return payload, nil
}

// EncodeAddResponse encodes responses from the "organization" service "add"
// endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("organization", "add", "string", v)
	}
	resp := NewAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "organization" service "add"
// endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *organizationpb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*organizationpb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("organization", "add", "*organizationpb.AddRequest", v)
		}
		if err := ValidateAddRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *organization.Organization
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeRemoveResponse encodes responses from the "organization" service
// "remove" endpoint.
func EncodeRemoveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewRemoveResponse()
	return resp, nil
}

// DecodeRemoveRequest decodes requests sent to "organization" service "remove"
// endpoint.
func DecodeRemoveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *organizationpb.RemoveRequest
		ok      bool
	)
	{
		if message, ok = v.(*organizationpb.RemoveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("organization", "remove", "*organizationpb.RemoveRequest", v)
		}
	}
	var payload *organization.RemovePayload
	{
		payload = NewRemovePayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "organization" service
// "update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewUpdateResponse()
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "organization" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *organizationpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*organizationpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("organization", "update", "*organizationpb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *organization.StoredOrganization
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}
