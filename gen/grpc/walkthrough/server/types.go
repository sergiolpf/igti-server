// Code generated by goa v3.1.1, DO NOT EDIT.
//
// walkthrough gRPC server types
//
// Command:
// $ goa gen guide.me/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	walkthroughpb "guide.me/gen/grpc/walkthrough/pb"
	walkthrough "guide.me/gen/walkthrough"
	walkthroughviews "guide.me/gen/walkthrough/views"
)

// NewListPayload builds the payload of the "list" endpoint of the
// "walkthrough" service from the gRPC request type.
func NewListPayload(message *walkthroughpb.ListRequest) *walkthrough.ListPayload {
	v := &walkthrough.ListPayload{
		ID: message.Id,
	}
	return v
}

// NewStoredWalkthroughCollection builds the gRPC response type from the result
// of the "list" endpoint of the "walkthrough" service.
func NewStoredWalkthroughCollection(result walkthroughviews.StoredWalkthroughCollectionView) *walkthroughpb.StoredWalkthroughCollection {
	message := &walkthroughpb.StoredWalkthroughCollection{}
	message.Field = make([]*walkthroughpb.StoredWalkthrough, len(result))
	for i, val := range result {
		message.Field[i] = &walkthroughpb.StoredWalkthrough{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.BaseURL != nil {
			message.Field[i].BaseUrl = *val.BaseURL
		}
		if val.Status != nil {
			message.Field[i].Status = *val.Status
		}
		if val.PublishedURL != nil {
			message.Field[i].PublishedUrl = *val.PublishedURL
		}
		if val.Organization != nil {
			message.Field[i].Organization = *val.Organization
		}
		if val.Status == nil {
			message.Field[i].Status = "draft"
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the
// "walkthrough" service from the gRPC request type.
func NewShowPayload(message *walkthroughpb.ShowRequest, view *string) *walkthrough.ShowPayload {
	v := &walkthrough.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v
}

// NewShowResponse builds the gRPC response type from the result of the "show"
// endpoint of the "walkthrough" service.
func NewShowResponse(result *walkthroughviews.StoredWalkthroughView) *walkthroughpb.ShowResponse {
	message := &walkthroughpb.ShowResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.BaseURL != nil {
		message.BaseUrl = *result.BaseURL
	}
	if result.Status != nil {
		message.Status = *result.Status
	}
	if result.PublishedURL != nil {
		message.PublishedUrl = *result.PublishedURL
	}
	if result.Organization != nil {
		message.Organization = *result.Organization
	}
	if result.Status == nil {
		message.Status = "draft"
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "walkthrough" service.
func NewShowNotFoundError(er *walkthrough.ElementNotFound) *walkthroughpb.ShowNotFoundError {
	message := &walkthroughpb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "walkthrough"
// service from the gRPC request type.
func NewAddPayload(message *walkthroughpb.AddRequest) *walkthrough.Walkthrough {
	v := &walkthrough.Walkthrough{
		Name:         message.Name,
		BaseURL:      message.BaseUrl,
		Status:       message.Status,
		Organization: message.Organization,
	}
	if message.PublishedUrl != "" {
		v.PublishedURL = &message.PublishedUrl
	}
	if message.Status == "" {
		v.Status = "draft"
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "walkthrough" service.
func NewAddResponse(result string) *walkthroughpb.AddResponse {
	message := &walkthroughpb.AddResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the
// "walkthrough" service from the gRPC request type.
func NewRemovePayload(message *walkthroughpb.RemoveRequest) *walkthrough.RemovePayload {
	v := &walkthrough.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "walkthrough" service.
func NewRemoveResponse() *walkthroughpb.RemoveResponse {
	message := &walkthroughpb.RemoveResponse{}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "walkthrough" service from the gRPC request type.
func NewUpdatePayload(message *walkthroughpb.UpdateRequest) *walkthrough.StoredWalkthrough {
	v := &walkthrough.StoredWalkthrough{
		ID:           message.Id,
		Name:         message.Name,
		BaseURL:      message.BaseUrl,
		Status:       message.Status,
		Organization: message.Organization,
	}
	if message.PublishedUrl != "" {
		v.PublishedURL = &message.PublishedUrl
	}
	if message.Status == "" {
		v.Status = "draft"
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "walkthrough" service.
func NewUpdateResponse() *walkthroughpb.UpdateResponse {
	message := &walkthroughpb.UpdateResponse{}
	return message
}

// NewPublishPayload builds the payload of the "publish" endpoint of the
// "walkthrough" service from the gRPC request type.
func NewPublishPayload(message *walkthroughpb.PublishRequest) *walkthrough.PublishPayload {
	v := &walkthrough.PublishPayload{
		ID: message.Id,
	}
	return v
}

// NewPublishResponse builds the gRPC response type from the result of the
// "publish" endpoint of the "walkthrough" service.
func NewPublishResponse() *walkthroughpb.PublishResponse {
	message := &walkthroughpb.PublishResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *walkthroughpb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.baseURL", message.BaseUrl, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	if message.Status != "" {
		if !(message.Status == "draft" || message.Status == "completed" || message.Status == "removed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.status", message.Status, []interface{}{"draft", "completed", "removed"}))
		}
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *walkthroughpb.UpdateRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.baseURL", message.BaseUrl, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	if message.Status != "" {
		if !(message.Status == "draft" || message.Status == "completed" || message.Status == "removed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.status", message.Status, []interface{}{"draft", "completed", "removed"}))
		}
	}
	return
}
