// Code generated by goa v3.1.1, DO NOT EDIT.
//
// walkthrough service
//
// Command:
// $ goa gen guide.me/design

package walkthrough

import (
	"context"

	walkthroughviews "guide.me/gen/walkthrough/views"
)

// The walkthrough service makes it possible to view, add, modify or remove
// walkthroughs.
type Service interface {
	// List all stored walkthrough for a given organization
	List(context.Context, *ListPayload) (res StoredWalkthroughCollection, err error)
	// Show Walkthrough by ID
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Show(context.Context, *ShowPayload) (res *StoredWalkthrough, view string, err error)
	// Add new Tutorial and return its ID.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Add(context.Context, *Walkthrough) (res *StoredWalkthrough, view string, err error)
	// Remove Walkthrough from storage
	Remove(context.Context, *RemovePayload) (err error)
	// Update Walkthrough with the given IDs.
	Update(context.Context, *StoredWalkthrough) (err error)
	// Rename Walkthrough with the given IDs.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Rename(context.Context, *RenamePayload) (res *StoredWalkthrough, view string, err error)
	// Publishes Walkthrough with the given IDs.
	Publish(context.Context, *PublishPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "walkthrough"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"list", "show", "add", "remove", "update", "rename", "publish"}

// ListPayload is the payload type of the walkthrough service list method.
type ListPayload struct {
	// ID of Organization to search for
	ID string
}

// StoredWalkthroughCollection is the result type of the walkthrough service
// list method.
type StoredWalkthroughCollection []*StoredWalkthrough

// ShowPayload is the payload type of the walkthrough service show method.
type ShowPayload struct {
	// ID of the Walkthrough to show
	ID string
	// View to render
	View *string
}

// StoredWalkthrough is the result type of the walkthrough service show method.
type StoredWalkthrough struct {
	// ID is the unique id of the Walkthrough.
	ID string
	// Name of the Tutorial
	Name string
	// base url for your tutorial to start from
	BaseURL string
	// Status of the walkthrough [draft|published]
	Status string
	// Code to be added into an existing page to make it visible locally
	PublishedURL *string
	// ID of the organization this tutorial belongs to
	Organization string
}

// Walkthrough is the payload type of the walkthrough service add method.
type Walkthrough struct {
	// Name of the Tutorial
	Name string
	// base url for your tutorial to start from
	BaseURL string
	// Status of the walkthrough [draft|published]
	Status string
	// Code to be added into an existing page to make it visible locally
	PublishedURL *string
	// ID of the organization this tutorial belongs to
	Organization string
}

// RemovePayload is the payload type of the walkthrough service remove method.
type RemovePayload struct {
	// ID of Walkthrough to remove
	ID string
}

// RenamePayload is the payload type of the walkthrough service rename method.
type RenamePayload struct {
	// ID of Walkthrough to be renamed
	ID string
	// New Name to the walkthrough
	Name string
}

// PublishPayload is the payload type of the walkthrough service publish method.
type PublishPayload struct {
	// ID of Walkthrough to be published
	ID string
}

type ElementNotFound struct {
	// Message of error
	Message string
	// ID of missing element
	ID string
}

// Error returns an error description.
func (e *ElementNotFound) Error() string {
	return ""
}

// ErrorName returns "ElementNotFound".
func (e *ElementNotFound) ErrorName() string {
	return e.Message
}

// NewStoredWalkthroughCollection initializes result type
// StoredWalkthroughCollection from viewed result type
// StoredWalkthroughCollection.
func NewStoredWalkthroughCollection(vres walkthroughviews.StoredWalkthroughCollection) StoredWalkthroughCollection {
	var res StoredWalkthroughCollection
	switch vres.View {
	case "default", "":
		res = newStoredWalkthroughCollection(vres.Projected)
	case "tiny":
		res = newStoredWalkthroughCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredWalkthroughCollection initializes viewed result type
// StoredWalkthroughCollection from result type StoredWalkthroughCollection
// using the given view.
func NewViewedStoredWalkthroughCollection(res StoredWalkthroughCollection, view string) walkthroughviews.StoredWalkthroughCollection {
	var vres walkthroughviews.StoredWalkthroughCollection
	switch view {
	case "default", "":
		p := newStoredWalkthroughCollectionView(res)
		vres = walkthroughviews.StoredWalkthroughCollection{Projected: p, View: "default"}
	case "tiny":
		p := newStoredWalkthroughCollectionViewTiny(res)
		vres = walkthroughviews.StoredWalkthroughCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewStoredWalkthrough initializes result type StoredWalkthrough from viewed
// result type StoredWalkthrough.
func NewStoredWalkthrough(vres *walkthroughviews.StoredWalkthrough) *StoredWalkthrough {
	var res *StoredWalkthrough
	switch vres.View {
	case "default", "":
		res = newStoredWalkthrough(vres.Projected)
	case "tiny":
		res = newStoredWalkthroughTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredWalkthrough initializes viewed result type StoredWalkthrough
// from result type StoredWalkthrough using the given view.
func NewViewedStoredWalkthrough(res *StoredWalkthrough, view string) *walkthroughviews.StoredWalkthrough {
	var vres *walkthroughviews.StoredWalkthrough
	switch view {
	case "default", "":
		p := newStoredWalkthroughView(res)
		vres = &walkthroughviews.StoredWalkthrough{Projected: p, View: "default"}
	case "tiny":
		p := newStoredWalkthroughViewTiny(res)
		vres = &walkthroughviews.StoredWalkthrough{Projected: p, View: "tiny"}
	}
	return vres
}

// newStoredWalkthroughCollection converts projected type
// StoredWalkthroughCollection to service type StoredWalkthroughCollection.
func newStoredWalkthroughCollection(vres walkthroughviews.StoredWalkthroughCollectionView) StoredWalkthroughCollection {
	res := make(StoredWalkthroughCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredWalkthrough(n)
	}
	return res
}

// newStoredWalkthroughCollectionTiny converts projected type
// StoredWalkthroughCollection to service type StoredWalkthroughCollection.
func newStoredWalkthroughCollectionTiny(vres walkthroughviews.StoredWalkthroughCollectionView) StoredWalkthroughCollection {
	res := make(StoredWalkthroughCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredWalkthroughTiny(n)
	}
	return res
}

// newStoredWalkthroughCollectionView projects result type
// StoredWalkthroughCollection to projected type
// StoredWalkthroughCollectionView using the "default" view.
func newStoredWalkthroughCollectionView(res StoredWalkthroughCollection) walkthroughviews.StoredWalkthroughCollectionView {
	vres := make(walkthroughviews.StoredWalkthroughCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredWalkthroughView(n)
	}
	return vres
}

// newStoredWalkthroughCollectionViewTiny projects result type
// StoredWalkthroughCollection to projected type
// StoredWalkthroughCollectionView using the "tiny" view.
func newStoredWalkthroughCollectionViewTiny(res StoredWalkthroughCollection) walkthroughviews.StoredWalkthroughCollectionView {
	vres := make(walkthroughviews.StoredWalkthroughCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredWalkthroughViewTiny(n)
	}
	return vres
}

// newStoredWalkthrough converts projected type StoredWalkthrough to service
// type StoredWalkthrough.
func newStoredWalkthrough(vres *walkthroughviews.StoredWalkthroughView) *StoredWalkthrough {
	res := &StoredWalkthrough{
		PublishedURL: vres.PublishedURL,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.BaseURL != nil {
		res.BaseURL = *vres.BaseURL
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Organization != nil {
		res.Organization = *vres.Organization
	}
	if vres.Status == nil {
		res.Status = "draft"
	}
	return res
}

// newStoredWalkthroughTiny converts projected type StoredWalkthrough to
// service type StoredWalkthrough.
func newStoredWalkthroughTiny(vres *walkthroughviews.StoredWalkthroughView) *StoredWalkthrough {
	res := &StoredWalkthrough{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.BaseURL != nil {
		res.BaseURL = *vres.BaseURL
	}
	if vres.Organization != nil {
		res.Organization = *vres.Organization
	}
	return res
}

// newStoredWalkthroughView projects result type StoredWalkthrough to projected
// type StoredWalkthroughView using the "default" view.
func newStoredWalkthroughView(res *StoredWalkthrough) *walkthroughviews.StoredWalkthroughView {
	vres := &walkthroughviews.StoredWalkthroughView{
		ID:           &res.ID,
		Name:         &res.Name,
		BaseURL:      &res.BaseURL,
		Status:       &res.Status,
		PublishedURL: res.PublishedURL,
		Organization: &res.Organization,
	}
	return vres
}

// newStoredWalkthroughViewTiny projects result type StoredWalkthrough to
// projected type StoredWalkthroughView using the "tiny" view.
func newStoredWalkthroughViewTiny(res *StoredWalkthrough) *walkthroughviews.StoredWalkthroughView {
	vres := &walkthroughviews.StoredWalkthroughView{
		ID:           &res.ID,
		Name:         &res.Name,
		BaseURL:      &res.BaseURL,
		Organization: &res.Organization,
	}
	return vres
}
