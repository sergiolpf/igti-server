// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization HTTP server types
//
// Command:
// $ goa gen guide.me/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// AddRequestBody is the type of the "organization" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of Organization
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Company website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// UpdateRequestBody is the type of the "organization" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// ID is the unique id of the Organization.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of Organization
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Company website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// StoredOrganizationResponseTinyCollection is the type of the "organization"
// service "list" endpoint HTTP response body.
type StoredOrganizationResponseTinyCollection []*StoredOrganizationResponseTiny

// ShowResponseBody is the type of the "organization" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// ID is the unique id of the Organization.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of Organization
	Name string `form:"name" json:"name" xml:"name"`
	// Company website URL
	URL string `form:"url" json:"url" xml:"url"`
}

// ShowResponseBodyTiny is the type of the "organization" service "show"
// endpoint HTTP response body.
type ShowResponseBodyTiny struct {
	// ID is the unique id of the Organization.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of Organization
	Name string `form:"name" json:"name" xml:"name"`
}

// ShowNotFoundResponseBody is the type of the "organization" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing element
	ID string `form:"id" json:"id" xml:"id"`
}

// StoredOrganizationResponseTiny is used to define fields on response body
// types.
type StoredOrganizationResponseTiny struct {
	// ID is the unique id of the Organization.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of Organization
	Name string `form:"name" json:"name" xml:"name"`
}

// NewStoredOrganizationResponseTinyCollection builds the HTTP response body
// from the result of the "list" endpoint of the "organization" service.
func NewStoredOrganizationResponseTinyCollection(res organizationviews.StoredOrganizationCollectionView) StoredOrganizationResponseTinyCollection {
	body := make([]*StoredOrganizationResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalOrganizationviewsStoredOrganizationViewToStoredOrganizationResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "organization" service.
func NewShowResponseBody(res *organizationviews.StoredOrganizationView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   *res.ID,
		Name: *res.Name,
		URL:  *res.URL,
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "organization" service.
func NewShowResponseBodyTiny(res *organizationviews.StoredOrganizationView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		ID:   *res.ID,
		Name: *res.Name,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "organization" service.
func NewShowNotFoundResponseBody(res *organization.ElementNotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewShowPayload builds a organization service show endpoint payload.
func NewShowPayload(id string, view *string) *organization.ShowPayload {
	v := &organization.ShowPayload{}
	v.ID = id
	v.View = view

	return v
}

// NewAddOrganization builds a organization service add endpoint payload.
func NewAddOrganization(body *AddRequestBody) *organization.Organization {
	v := &organization.Organization{
		Name: *body.Name,
		URL:  *body.URL,
	}

	return v
}

// NewRemovePayload builds a organization service remove endpoint payload.
func NewRemovePayload(id string) *organization.RemovePayload {
	v := &organization.RemovePayload{}
	v.ID = id

	return v
}

// NewUpdateStoredOrganization builds a organization service update endpoint
// payload.
func NewUpdateStoredOrganization(body *UpdateRequestBody) *organization.StoredOrganization {
	v := &organization.StoredOrganization{
		ID:   *body.ID,
		Name: *body.Name,
		URL:  *body.URL,
	}

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 200, false))
		}
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.url", *body.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 200, false))
		}
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.url", *body.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	return
}
