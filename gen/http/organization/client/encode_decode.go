// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization HTTP client encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "organization" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListOrganizationPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the
// organization list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organization", "list", err)
			}
			p := NewListStoredOrganizationCollectionOK(body)
			view := "tiny"
			vres := organizationviews.StoredOrganizationCollection{Projected: p, View: view}
			if err = organizationviews.ValidateStoredOrganizationCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("organization", "list", err)
			}
			res := organization.NewStoredOrganizationCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "organization" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organization.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organization", "show", "*organization.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowOrganizationPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the organization
// show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*organization.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("organization", "show", "*organization.ShowPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// organization show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *organization.OrgNotFound): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organization", "show", err)
			}
			p := NewShowStoredOrganizationOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &organizationviews.StoredOrganization{Projected: p, View: view}
			if err = organizationviews.ValidateStoredOrganization(vres); err != nil {
				return nil, goahttp.ErrValidationError("organization", "show", err)
			}
			res := organization.NewStoredOrganization(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organization", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organization", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "organization" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddOrganizationPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the organization
// add server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*organization.Organization)
		if !ok {
			return goahttp.ErrInvalidType("organization", "add", "*organization.Organization", v)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organization", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the
// organization add endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organization", "add", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveRequest instantiates a HTTP request object with method and path
// set to call the "organization" service "remove" endpoint
func (c *Client) BuildRemoveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organization.RemovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organization", "remove", "*organization.RemovePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveOrganizationPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "remove", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveResponse returns a decoder for responses returned by the
// organization remove endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRemoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "remove", resp.StatusCode, string(body))
		}
	}
}

// BuildMultiAddRequest instantiates a HTTP request object with method and path
// set to call the "organization" service "multi_add" endpoint
func (c *Client) BuildMultiAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MultiAddOrganizationPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "multi_add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMultiAddRequest returns an encoder for requests sent to the
// organization multi_add server.
func EncodeMultiAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.([]*organization.Organization)
		if !ok {
			return goahttp.ErrInvalidType("organization", "multi_add", "[]*organization.Organization", v)
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("organization", "multi_add", err)
		}
		return nil
	}
}

// NewOrganizationMultiAddEncoder returns an encoder to encode the multipart
// request for the "organization" service "multi_add" endpoint.
func NewOrganizationMultiAddEncoder(encoderFn OrganizationMultiAddEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.([]*organization.Organization)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeMultiAddResponse returns a decoder for responses returned by the
// organization multi_add endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeMultiAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organization", "multi_add", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "multi_add", resp.StatusCode, string(body))
		}
	}
}

// BuildMultiUpdateRequest instantiates a HTTP request object with method and
// path set to call the "organization" service "multi_update" endpoint
func (c *Client) BuildMultiUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MultiUpdateOrganizationPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organization", "multi_update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMultiUpdateRequest returns an encoder for requests sent to the
// organization multi_update server.
func EncodeMultiUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*organization.MultiUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("organization", "multi_update", "*organization.MultiUpdatePayload", v)
		}
		values := req.URL.Query()
		for _, value := range p.Ids {
			values.Add("ids", value)
		}
		req.URL.RawQuery = values.Encode()
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("organization", "multi_update", err)
		}
		return nil
	}
}

// NewOrganizationMultiUpdateEncoder returns an encoder to encode the multipart
// request for the "organization" service "multi_update" endpoint.
func NewOrganizationMultiUpdateEncoder(encoderFn OrganizationMultiUpdateEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.(*organization.MultiUpdatePayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeMultiUpdateResponse returns a decoder for responses returned by the
// organization multi_update endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeMultiUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organization", "multi_update", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredOrganizationResponseToOrganizationviewsStoredOrganizationView
// builds a value of type *organizationviews.StoredOrganizationView from a
// value of type *StoredOrganizationResponse.
func unmarshalStoredOrganizationResponseToOrganizationviewsStoredOrganizationView(v *StoredOrganizationResponse) *organizationviews.StoredOrganizationView {
	res := &organizationviews.StoredOrganizationView{
		ID:   v.ID,
		Name: v.Name,
		URL:  v.URL,
	}

	return res
}

// marshalOrganizationOrganizationToOrganizationRequestBody builds a value of
// type *OrganizationRequestBody from a value of type
// *organization.Organization.
func marshalOrganizationOrganizationToOrganizationRequestBody(v *organization.Organization) *OrganizationRequestBody {
	res := &OrganizationRequestBody{
		Name: v.Name,
		URL:  v.URL,
	}

	return res
}

// marshalOrganizationRequestBodyToOrganizationOrganization builds a value of
// type *organization.Organization from a value of type
// *OrganizationRequestBody.
func marshalOrganizationRequestBodyToOrganizationOrganization(v *OrganizationRequestBody) *organization.Organization {
	res := &organization.Organization{
		Name: v.Name,
		URL:  v.URL,
	}

	return res
}
