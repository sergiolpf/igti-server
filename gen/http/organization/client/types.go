// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization HTTP client types
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"unicode/utf8"

	"go.mongodb.org/mongo-driver/bson/primitive"
	goa "goa.design/goa/v3/pkg"
	organization "guide.me/gen/organization"
	organizationviews "guide.me/gen/organization/views"
)

// AddRequestBody is the type of the "organization" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of Organization
	Name string `form:"name" json:"name" xml:"name"`
	// Company website URL
	URL string `form:"url" json:"url" xml:"url"`
}

// MultiUpdateRequestBody is the type of the "organization" service
// "multi_update" endpoint HTTP request body.
type MultiUpdateRequestBody struct {
	// Array of bottle info that matches the ids attribute
	Organizations []*OrganizationRequestBody `form:"organizations" json:"organizations" xml:"organizations"`
}

// ListResponseBody is the type of the "organization" service "list" endpoint
// HTTP response body.
type ListResponseBody []*StoredOrganizationResponse

// ShowResponseBody is the type of the "organization" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// ID is the unique id of the Organization.
	ID *primitive.ObjectId `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of Organization
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Company website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "organization" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing Organization
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredOrganizationResponse is used to define fields on response body types.
type StoredOrganizationResponse struct {
	// ID is the unique id of the Organization.
	ID *primitive.ObjectId `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of Organization
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Company website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// OrganizationRequestBody is used to define fields on request body types.
type OrganizationRequestBody struct {
	// Name of Organization
	Name string `form:"name" json:"name" xml:"name"`
	// Company website URL
	URL string `form:"url" json:"url" xml:"url"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "organization" service.
func NewAddRequestBody(p *organization.Organization) *AddRequestBody {
	body := &AddRequestBody{
		Name: p.Name,
		URL:  p.URL,
	}
	return body
}

// NewOrganizationRequestBody builds the HTTP request body from the payload of
// the "multi_add" endpoint of the "organization" service.
func NewOrganizationRequestBody(p []*organization.Organization) []*OrganizationRequestBody {
	body := make([]*OrganizationRequestBody, len(p))
	for i, val := range p {
		body[i] = marshalOrganizationOrganizationToOrganizationRequestBody(val)
	}
	return body
}

// NewMultiUpdateRequestBody builds the HTTP request body from the payload of
// the "multi_update" endpoint of the "organization" service.
func NewMultiUpdateRequestBody(p *organization.MultiUpdatePayload) *MultiUpdateRequestBody {
	body := &MultiUpdateRequestBody{}
	if p.Organizations != nil {
		body.Organizations = make([]*OrganizationRequestBody, len(p.Organizations))
		for i, val := range p.Organizations {
			body.Organizations[i] = marshalOrganizationOrganizationToOrganizationRequestBody(val)
		}
	}
	return body
}

// NewListStoredOrganizationCollectionOK builds a "organization" service "list"
// endpoint result from a HTTP "OK" response.
func NewListStoredOrganizationCollectionOK(body ListResponseBody) organizationviews.StoredOrganizationCollectionView {
	v := make([]*organizationviews.StoredOrganizationView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredOrganizationResponseToOrganizationviewsStoredOrganizationView(val)
	}
	return v
}

// NewShowStoredOrganizationOK builds a "organization" service "show" endpoint
// result from a HTTP "OK" response.
func NewShowStoredOrganizationOK(body *ShowResponseBody) *organizationviews.StoredOrganizationView {
	v := &organizationviews.StoredOrganizationView{
		ID:   body.ID,
		Name: body.Name,
		URL:  body.URL,
	}

	return v
}

// NewShowNotFound builds a organization service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *organization.OrgNotFound {
	v := &organization.OrgNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredOrganizationResponse runs the validations defined on
// StoredOrganizationResponse
func ValidateStoredOrganizationResponse(body *StoredOrganizationResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.url", *body.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	return
}

// ValidateOrganizationRequestBody runs the validations defined on
// OrganizationRequestBody
func ValidateOrganizationRequestBody(body *OrganizationRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.url", body.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	return
}
