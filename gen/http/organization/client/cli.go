// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization HTTP client CLI support package
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	organization "guide.me/gen/organization"
)

// BuildShowPayload builds the payload for the organization show endpoint from
// CLI flags.
func BuildShowPayload(organizationShowID string, organizationShowView string) (*organization.ShowPayload, error) {
	var err error
	var id string
	{
		id = organizationShowID
	}
	var view *string
	{
		if organizationShowView != "" {
			view = &organizationShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &organization.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the organization add endpoint from
// CLI flags.
func BuildAddPayload(organizationAddBody string) (*organization.Organization, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(organizationAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"Blue\\'s Cuvee\",\n      \"url\": \"http://www.google.com/\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.url", body.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
		if err != nil {
			return nil, err
		}
	}
	v := &organization.Organization{
		Name: body.Name,
		URL:  body.URL,
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the organization remove endpoint
// from CLI flags.
func BuildRemovePayload(organizationRemoveID string) (*organization.RemovePayload, error) {
	var id string
	{
		id = organizationRemoveID
	}
	v := &organization.RemovePayload{}
	v.ID = id

	return v, nil
}

// BuildMultiAddPayload builds the payload for the organization multi_add
// endpoint from CLI flags.
func BuildMultiAddPayload(organizationMultiAddBody string) ([]*organization.Organization, error) {
	var err error
	var body []*OrganizationRequestBody
	{
		err = json.Unmarshal([]byte(organizationMultiAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'[\n      {\n         \"name\": \"Blue\\'s Cuvee\",\n         \"url\": \"http://www.google.com/\"\n      },\n      {\n         \"name\": \"Blue\\'s Cuvee\",\n         \"url\": \"http://www.google.com/\"\n      },\n      {\n         \"name\": \"Blue\\'s Cuvee\",\n         \"url\": \"http://www.google.com/\"\n      },\n      {\n         \"name\": \"Blue\\'s Cuvee\",\n         \"url\": \"http://www.google.com/\"\n      }\n   ]'")
		}
	}
	v := make([]*organization.Organization, len(body))
	for i, val := range body {
		v[i] = marshalOrganizationRequestBodyToOrganizationOrganization(val)
	}
	return v, nil
}

// BuildMultiUpdatePayload builds the payload for the organization multi_update
// endpoint from CLI flags.
func BuildMultiUpdatePayload(organizationMultiUpdateBody string, organizationMultiUpdateIds string) (*organization.MultiUpdatePayload, error) {
	var err error
	var body MultiUpdateRequestBody
	{
		err = json.Unmarshal([]byte(organizationMultiUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"organizations\": [\n         {\n            \"name\": \"Blue\\'s Cuvee\",\n            \"url\": \"http://www.google.com/\"\n         },\n         {\n            \"name\": \"Blue\\'s Cuvee\",\n            \"url\": \"http://www.google.com/\"\n         }\n      ]\n   }'")
		}
		if body.Organizations == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("organizations", "body"))
		}
		for _, e := range body.Organizations {
			if e != nil {
				if err2 := ValidateOrganizationRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var ids []string
	{
		err = json.Unmarshal([]byte(organizationMultiUpdateIds), &ids)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for ids, example of valid JSON:\n%s", "'[\n      \"Aut voluptatum non ut odit.\",\n      \"Nobis pariatur ratione dolorem consectetur itaque.\",\n      \"Et quo sunt amet quis et ipsam.\"\n   ]'")
		}
	}
	v := &organization.MultiUpdatePayload{}
	if body.Organizations != nil {
		v.Organizations = make([]*organization.Organization, len(body.Organizations))
		for i, val := range body.Organizations {
			v.Organizations[i] = marshalOrganizationRequestBodyToOrganizationOrganization(val)
		}
	}
	v.Ids = ids

	return v, nil
}
