// Code generated by goa v3.1.1, DO NOT EDIT.
//
// walkthrough HTTP client encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	walkthrough "guide.me/gen/walkthrough"
	walkthroughviews "guide.me/gen/walkthrough/views"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "walkthrough" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*walkthrough.ListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("walkthrough", "list", "*walkthrough.ListPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListWalkthroughPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the
// walkthrough list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("walkthrough", "list", err)
			}
			p := NewListStoredWalkthroughCollectionOK(body)
			view := "tiny"
			vres := walkthroughviews.StoredWalkthroughCollection{Projected: p, View: view}
			if err = walkthroughviews.ValidateStoredWalkthroughCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("walkthrough", "list", err)
			}
			res := walkthrough.NewStoredWalkthroughCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "walkthrough" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*walkthrough.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("walkthrough", "show", "*walkthrough.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowWalkthroughPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the walkthrough
// show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*walkthrough.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("walkthrough", "show", "*walkthrough.ShowPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// walkthrough show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *walkthrough.ElementNotFound): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("walkthrough", "show", err)
			}
			p := NewShowStoredWalkthroughOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &walkthroughviews.StoredWalkthrough{Projected: p, View: view}
			if err = walkthroughviews.ValidateStoredWalkthrough(vres); err != nil {
				return nil, goahttp.ErrValidationError("walkthrough", "show", err)
			}
			res := walkthrough.NewStoredWalkthrough(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("walkthrough", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("walkthrough", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "walkthrough" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddWalkthroughPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the walkthrough add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*walkthrough.Walkthrough)
		if !ok {
			return goahttp.ErrInvalidType("walkthrough", "add", "*walkthrough.Walkthrough", v)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("walkthrough", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the
// walkthrough add endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("walkthrough", "add", err)
			}
			p := NewAddStoredWalkthroughCreated(&body)
			view := resp.Header.Get("goa-view")
			vres := &walkthroughviews.StoredWalkthrough{Projected: p, View: view}
			if err = walkthroughviews.ValidateStoredWalkthrough(vres); err != nil {
				return nil, goahttp.ErrValidationError("walkthrough", "add", err)
			}
			res := walkthrough.NewStoredWalkthrough(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveRequest instantiates a HTTP request object with method and path
// set to call the "walkthrough" service "remove" endpoint
func (c *Client) BuildRemoveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*walkthrough.RemovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("walkthrough", "remove", "*walkthrough.RemovePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveWalkthroughPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "remove", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveResponse returns a decoder for responses returned by the
// walkthrough remove endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRemoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "remove", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "walkthrough" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateWalkthroughPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the walkthrough
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*walkthrough.StoredWalkthrough)
		if !ok {
			return goahttp.ErrInvalidType("walkthrough", "update", "*walkthrough.StoredWalkthrough", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("walkthrough", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// walkthrough update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildRenameRequest instantiates a HTTP request object with method and path
// set to call the "walkthrough" service "rename" endpoint
func (c *Client) BuildRenameRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RenameWalkthroughPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "rename", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRenameRequest returns an encoder for requests sent to the walkthrough
// rename server.
func EncodeRenameRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*walkthrough.RenamePayload)
		if !ok {
			return goahttp.ErrInvalidType("walkthrough", "rename", "*walkthrough.RenamePayload", v)
		}
		body := NewRenameRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("walkthrough", "rename", err)
		}
		return nil
	}
}

// DecodeRenameResponse returns a decoder for responses returned by the
// walkthrough rename endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRenameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RenameResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("walkthrough", "rename", err)
			}
			p := NewRenameStoredWalkthroughOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &walkthroughviews.StoredWalkthrough{Projected: p, View: view}
			if err = walkthroughviews.ValidateStoredWalkthrough(vres); err != nil {
				return nil, goahttp.ErrValidationError("walkthrough", "rename", err)
			}
			res := walkthrough.NewStoredWalkthrough(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "rename", resp.StatusCode, string(body))
		}
	}
}

// BuildPublishRequest instantiates a HTTP request object with method and path
// set to call the "walkthrough" service "publish" endpoint
func (c *Client) BuildPublishRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*walkthrough.PublishPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("walkthrough", "publish", "*walkthrough.PublishPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PublishWalkthroughPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("walkthrough", "publish", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePublishResponse returns a decoder for responses returned by the
// walkthrough publish endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePublishResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("walkthrough", "publish", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredWalkthroughResponseToWalkthroughviewsStoredWalkthroughView
// builds a value of type *walkthroughviews.StoredWalkthroughView from a value
// of type *StoredWalkthroughResponse.
func unmarshalStoredWalkthroughResponseToWalkthroughviewsStoredWalkthroughView(v *StoredWalkthroughResponse) *walkthroughviews.StoredWalkthroughView {
	res := &walkthroughviews.StoredWalkthroughView{
		ID:           v.ID,
		Name:         v.Name,
		BaseURL:      v.BaseURL,
		Status:       v.Status,
		PublishedURL: v.PublishedURL,
		Organization: v.Organization,
	}
	if v.Status == nil {
		var tmp string = "draft"
		res.Status = &tmp
	}

	return res
}
