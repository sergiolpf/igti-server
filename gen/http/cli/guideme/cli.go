// Code generated by goa v3.1.1, DO NOT EDIT.
//
// guideme HTTP client CLI support package
//
// Command:
// $ goa gen guide.me/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	organizationc "guide.me/gen/http/organization/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `organization (list|show|add|remove|multi-add|multi-update)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` organization list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	organizationMultiAddEncoderFn organizationc.OrganizationMultiAddEncoderFunc,
	organizationMultiUpdateEncoderFn organizationc.OrganizationMultiUpdateEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		organizationFlags = flag.NewFlagSet("organization", flag.ContinueOnError)

		organizationListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		organizationShowFlags    = flag.NewFlagSet("show", flag.ExitOnError)
		organizationShowIDFlag   = organizationShowFlags.String("id", "REQUIRED", "ID of the Organization to show")
		organizationShowViewFlag = organizationShowFlags.String("view", "", "")

		organizationAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		organizationAddBodyFlag = organizationAddFlags.String("body", "REQUIRED", "")

		organizationRemoveFlags  = flag.NewFlagSet("remove", flag.ExitOnError)
		organizationRemoveIDFlag = organizationRemoveFlags.String("id", "REQUIRED", "ID of Organization to remove")

		organizationMultiAddFlags    = flag.NewFlagSet("multi-add", flag.ExitOnError)
		organizationMultiAddBodyFlag = organizationMultiAddFlags.String("body", "REQUIRED", "")

		organizationMultiUpdateFlags    = flag.NewFlagSet("multi-update", flag.ExitOnError)
		organizationMultiUpdateBodyFlag = organizationMultiUpdateFlags.String("body", "REQUIRED", "")
		organizationMultiUpdateIdsFlag  = organizationMultiUpdateFlags.String("ids", "REQUIRED", "")
	)
	organizationFlags.Usage = organizationUsage
	organizationListFlags.Usage = organizationListUsage
	organizationShowFlags.Usage = organizationShowUsage
	organizationAddFlags.Usage = organizationAddUsage
	organizationRemoveFlags.Usage = organizationRemoveUsage
	organizationMultiAddFlags.Usage = organizationMultiAddUsage
	organizationMultiUpdateFlags.Usage = organizationMultiUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "organization":
			svcf = organizationFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "organization":
			switch epn {
			case "list":
				epf = organizationListFlags

			case "show":
				epf = organizationShowFlags

			case "add":
				epf = organizationAddFlags

			case "remove":
				epf = organizationRemoveFlags

			case "multi-add":
				epf = organizationMultiAddFlags

			case "multi-update":
				epf = organizationMultiUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "organization":
			c := organizationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "show":
				endpoint = c.Show()
				data, err = organizationc.BuildShowPayload(*organizationShowIDFlag, *organizationShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = organizationc.BuildAddPayload(*organizationAddBodyFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = organizationc.BuildRemovePayload(*organizationRemoveIDFlag)
			case "multi-add":
				endpoint = c.MultiAdd(organizationMultiAddEncoderFn)
				data, err = organizationc.BuildMultiAddPayload(*organizationMultiAddBodyFlag)
			case "multi-update":
				endpoint = c.MultiUpdate(organizationMultiUpdateEncoderFn)
				data, err = organizationc.BuildMultiUpdatePayload(*organizationMultiUpdateBodyFlag, *organizationMultiUpdateIdsFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// organizationUsage displays the usage of the organization command and its
// subcommands.
func organizationUsage() {
	fmt.Fprintf(os.Stderr, `The Organization service makes it possible to view, add or remove Organizations.
Usage:
    %s [globalflags] organization COMMAND [flags]

COMMAND:
    list: List all stored Organizations
    show: Show Organization by ID
    add: Add new bottle and return its ID.
    remove: Remove Organization from storage
    multi-add: Add n number of Organizations and return their IDs. This is a multipart request and each part has field name 'organization' and contains the encoded organization info to be added.
    multi-update: Update Organizations with the given IDs. This is a multipart request and each part has field name 'organizations' and contains the encoded Organizations info to be updated. The IDs in the query parameter is mapped to each part in the request.

Additional help:
    %s organization COMMAND --help
`, os.Args[0], os.Args[0])
}
func organizationListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization list

List all stored Organizations

Example:
    `+os.Args[0]+` organization list
`, os.Args[0])
}

func organizationShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization show -id STRING -view STRING

Show Organization by ID
    -id STRING: ID of the Organization to show
    -view STRING: 

Example:
    `+os.Args[0]+` organization show --id "Quisquam ratione." --view "default"
`, os.Args[0])
}

func organizationAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization add -body JSON

Add new bottle and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` organization add --body '{
      "name": "Blue\'s Cuvee",
      "url": "http://www.google.com/"
   }'
`, os.Args[0])
}

func organizationRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization remove -id STRING

Remove Organization from storage
    -id STRING: ID of Organization to remove

Example:
    `+os.Args[0]+` organization remove --id "In et numquam maxime qui qui."
`, os.Args[0])
}

func organizationMultiAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization multi-add -body JSON

Add n number of Organizations and return their IDs. This is a multipart request and each part has field name 'organization' and contains the encoded organization info to be added.
    -body JSON: 

Example:
    `+os.Args[0]+` organization multi-add --body '[
      {
         "name": "Blue\'s Cuvee",
         "url": "http://www.google.com/"
      },
      {
         "name": "Blue\'s Cuvee",
         "url": "http://www.google.com/"
      },
      {
         "name": "Blue\'s Cuvee",
         "url": "http://www.google.com/"
      },
      {
         "name": "Blue\'s Cuvee",
         "url": "http://www.google.com/"
      }
   ]'
`, os.Args[0])
}

func organizationMultiUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] organization multi-update -body JSON -ids JSON

Update Organizations with the given IDs. This is a multipart request and each part has field name 'organizations' and contains the encoded Organizations info to be updated. The IDs in the query parameter is mapped to each part in the request.
    -body JSON: 
    -ids JSON: 

Example:
    `+os.Args[0]+` organization multi-update --body '{
      "organizations": [
         {
            "name": "Blue\'s Cuvee",
            "url": "http://www.google.com/"
         },
         {
            "name": "Blue\'s Cuvee",
            "url": "http://www.google.com/"
         }
      ]
   }' --ids '[
      "Aut voluptatum non ut odit.",
      "Nobis pariatur ratione dolorem consectetur itaque.",
      "Et quo sunt amet quis et ipsam."
   ]'
`, os.Args[0])
}
