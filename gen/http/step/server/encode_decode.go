// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step HTTP server encoders and decoders
//
// Command:
// $ goa gen guide.me/design

package server

import (
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	step "guide.me/gen/step"
	stepviews "guide.me/gen/step/views"
)

// EncodeListResponse returns an encoder for responses returned by the step
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*stepviews.StoredSteps)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the step list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewListPayload(id)

		return payload, nil
	}
}

// EncodeAddResponse returns an encoder for responses returned by the step add
// endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*stepviews.ResultStep)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewAddResponseBody(res.Projected)
		case "tiny":
			body = NewAddResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the step add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddStepPayload(&body)

		return payload, nil
	}
}

// EncodeRemoveResponse returns an encoder for responses returned by the step
// remove endpoint.
func EncodeRemoveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveRequest returns a decoder for requests sent to the step remove
// endpoint.
func DecodeRemoveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewRemovePayload(id)

		return payload, nil
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the step
// update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the step update
// endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateStoredSteps(&body)

		return payload, nil
	}
}

// marshalStepviewsStepViewToStepResponseBody builds a value of type
// *StepResponseBody from a value of type *stepviews.StepView.
func marshalStepviewsStepViewToStepResponseBody(v *stepviews.StepView) *StepResponseBody {
	res := &StepResponseBody{
		Title:      *v.Title,
		Target:     *v.Target,
		StepNumber: *v.StepNumber,
		Placement:  *v.Placement,
		Content:    *v.Content,
		Action:     *v.Action,
	}

	return res
}

// unmarshalStepRequestBodyToStepStep builds a value of type *step.Step from a
// value of type *StepRequestBody.
func unmarshalStepRequestBodyToStepStep(v *StepRequestBody) *step.Step {
	if v == nil {
		return nil
	}
	res := &step.Step{
		Title:      *v.Title,
		Target:     *v.Target,
		StepNumber: *v.StepNumber,
		Placement:  *v.Placement,
		Content:    *v.Content,
		Action:     *v.Action,
	}

	return res
}

// marshalStepviewsStoredStepViewToStoredStepResponseBody builds a value of
// type *StoredStepResponseBody from a value of type *stepviews.StoredStepView.
func marshalStepviewsStoredStepViewToStoredStepResponseBody(v *stepviews.StoredStepView) *StoredStepResponseBody {
	res := &StoredStepResponseBody{
		ID:         *v.ID,
		Title:      *v.Title,
		Target:     *v.Target,
		StepNumber: *v.StepNumber,
		Placement:  *v.Placement,
		Content:    *v.Content,
		Action:     *v.Action,
	}

	return res
}
