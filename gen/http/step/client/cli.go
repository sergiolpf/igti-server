// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step HTTP client CLI support package
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
	step "guide.me/gen/step"
)

// BuildListPayload builds the payload for the step list endpoint from CLI
// flags.
func BuildListPayload(stepListID string) (*step.ListPayload, error) {
	var id string
	{
		id = stepListID
	}
	v := &step.ListPayload{}
	v.ID = id

	return v, nil
}

// BuildAddPayload builds the payload for the step add endpoint from CLI flags.
func BuildAddPayload(stepAddBody string) (*step.AddStepPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(stepAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"step\": {\n         \"action\": \"next\",\n         \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n         \"placement\": \"left\",\n         \"stepNumber\": 1411758952,\n         \"target\": \"Aliquam non nostrum veniam et sapiente.\",\n         \"title\": \"Click here to make it work!\"\n      },\n      \"wtId\": \"Eos doloremque quo aut molestiae.\"\n   }'")
		}
	}
	v := &step.AddStepPayload{
		WtID: body.WtID,
	}
	if body.Step != nil {
		v.Step = marshalStepRequestBodyToStepStep(body.Step)
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the step remove endpoint from CLI
// flags.
func BuildRemovePayload(stepRemoveBody string) (*step.RemovePayload, error) {
	var err error
	var body RemoveRequestBody
	{
		err = json.Unmarshal([]byte(stepRemoveBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"id\": \"Tempore provident at fugit libero ut recusandae.\",\n      \"wtId\": \"Voluptatem est ipsa mollitia in atque.\"\n   }'")
		}
	}
	v := &step.RemovePayload{
		WtID: body.WtID,
		ID:   body.ID,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the step update endpoint from CLI
// flags.
func BuildUpdatePayload(stepUpdateBody string) (*step.StoredListOfSteps, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(stepUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"steps\": [\n         {\n            \"action\": \"next\",\n            \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n            \"id\": \"Sed et sit dolor aut voluptas.\",\n            \"placement\": \"top\",\n            \"stepNumber\": 68608253,\n            \"target\": \"Impedit voluptatem dolor et voluptatem.\",\n            \"title\": \"Click here to make it work!\"\n         },\n         {\n            \"action\": \"next\",\n            \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n            \"id\": \"Sed et sit dolor aut voluptas.\",\n            \"placement\": \"top\",\n            \"stepNumber\": 68608253,\n            \"target\": \"Impedit voluptatem dolor et voluptatem.\",\n            \"title\": \"Click here to make it work!\"\n         },\n         {\n            \"action\": \"next\",\n            \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n            \"id\": \"Sed et sit dolor aut voluptas.\",\n            \"placement\": \"top\",\n            \"stepNumber\": 68608253,\n            \"target\": \"Impedit voluptatem dolor et voluptatem.\",\n            \"title\": \"Click here to make it work!\"\n         },\n         {\n            \"action\": \"next\",\n            \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n            \"id\": \"Sed et sit dolor aut voluptas.\",\n            \"placement\": \"top\",\n            \"stepNumber\": 68608253,\n            \"target\": \"Impedit voluptatem dolor et voluptatem.\",\n            \"title\": \"Click here to make it work!\"\n         }\n      ],\n      \"wtId\": \"123abc\"\n   }'")
		}
		if body.Steps == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
		}
		for _, e := range body.Steps {
			if e != nil {
				if err2 := ValidateStoredStepRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &step.StoredListOfSteps{
		WtID: body.WtID,
	}
	if body.Steps != nil {
		v.Steps = make([]*step.StoredStep, len(body.Steps))
		for i, val := range body.Steps {
			v.Steps[i] = marshalStoredStepRequestBodyToStepStoredStep(val)
		}
	}

	return v, nil
}
