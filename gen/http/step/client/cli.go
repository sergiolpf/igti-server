// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step HTTP client CLI support package
//
// Command:
// $ goa gen guide.me/design

package client

import (
	"encoding/json"
	"fmt"

	step "guide.me/gen/step"
)

// BuildListPayload builds the payload for the step list endpoint from CLI
// flags.
func BuildListPayload(stepListID string) (*step.ListPayload, error) {
	var id string
	{
		id = stepListID
	}
	v := &step.ListPayload{}
	v.ID = id

	return v, nil
}

// BuildAddPayload builds the payload for the step add endpoint from CLI flags.
func BuildAddPayload(stepAddBody string) (*step.AddStepPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(stepAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"step\": {\n         \"action\": \"end\",\n         \"content\": \"This dropdown contains values from the list of status, for our scenario we want to chose \\'active\\'\",\n         \"placement\": \"left\",\n         \"stepNumber\": 1803879362,\n         \"target\": \"Rem delectus.\",\n         \"title\": \"Click here to make it work!\"\n      },\n      \"wtId\": \"Minus magni a eos non eum et.\"\n   }'")
		}
	}
	v := &step.AddStepPayload{
		WtID: body.WtID,
	}
	if body.Step != nil {
		v.Step = marshalStepRequestBodyToStepStep(body.Step)
	}

	return v, nil
}
