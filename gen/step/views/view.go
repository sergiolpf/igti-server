// Code generated by goa v3.1.1, DO NOT EDIT.
//
// step views
//
// Command:
// $ goa gen guide.me/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredWalkthroughCollection is the viewed result type that is projected
// based on a view.
type StoredWalkthroughCollection struct {
	// Type to project
	Projected StoredWalkthroughCollectionView
	// View to render
	View string
}

// StoredWalkthrough is the viewed result type that is projected based on a
// view.
type StoredWalkthrough struct {
	// Type to project
	Projected *StoredWalkthroughView
	// View to render
	View string
}

// StoredWalkthroughCollectionView is a type that runs validations on a
// projected type.
type StoredWalkthroughCollectionView []*StoredWalkthroughView

// StoredWalkthroughView is a type that runs validations on a projected type.
type StoredWalkthroughView struct {
	// ID is the unique id of the Walkthrough.
	ID *string
	// Name of the Tutorial
	Name *string
	// base url for your tutorial to start from
	BaseURL *string
	// Status of the walkthrough [draft|published]
	Status *string
	// Code to be added into an existing page to make it visible locally
	PublishedURL *string
	// ID of the organization this tutorial belongs to
	Organization *string
}

var (
	// StoredWalkthroughCollectionMap is a map of attribute names in result type
	// StoredWalkthroughCollection indexed by view name.
	StoredWalkthroughCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"baseURL",
			"status",
			"publishedURL",
			"organization",
		},
		"tiny": []string{
			"id",
			"name",
			"baseURL",
			"organization",
		},
	}
	// StoredWalkthroughMap is a map of attribute names in result type
	// StoredWalkthrough indexed by view name.
	StoredWalkthroughMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"baseURL",
			"status",
			"publishedURL",
			"organization",
		},
		"tiny": []string{
			"id",
			"name",
			"baseURL",
			"organization",
		},
	}
)

// ValidateStoredWalkthroughCollection runs the validations defined on the
// viewed result type StoredWalkthroughCollection.
func ValidateStoredWalkthroughCollection(result StoredWalkthroughCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredWalkthroughCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredWalkthroughCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredWalkthrough runs the validations defined on the viewed result
// type StoredWalkthrough.
func ValidateStoredWalkthrough(result *StoredWalkthrough) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredWalkthroughView(result.Projected)
	case "tiny":
		err = ValidateStoredWalkthroughViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredWalkthroughCollectionView runs the validations defined on
// StoredWalkthroughCollectionView using the "default" view.
func ValidateStoredWalkthroughCollectionView(result StoredWalkthroughCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredWalkthroughView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredWalkthroughCollectionViewTiny runs the validations defined on
// StoredWalkthroughCollectionView using the "tiny" view.
func ValidateStoredWalkthroughCollectionViewTiny(result StoredWalkthroughCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredWalkthroughViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredWalkthroughView runs the validations defined on
// StoredWalkthroughView using the "default" view.
func ValidateStoredWalkthroughView(result *StoredWalkthroughView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.BaseURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("baseURL", "result"))
	}
	if result.Organization == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 100, false))
		}
	}
	if result.BaseURL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.baseURL", *result.BaseURL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	if result.Status != nil {
		if !(*result.Status == "draft" || *result.Status == "completed" || *result.Status == "removed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"draft", "completed", "removed"}))
		}
	}
	return
}

// ValidateStoredWalkthroughViewTiny runs the validations defined on
// StoredWalkthroughView using the "tiny" view.
func ValidateStoredWalkthroughViewTiny(result *StoredWalkthroughView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.BaseURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("baseURL", "result"))
	}
	if result.Organization == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 100, false))
		}
	}
	if result.BaseURL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.baseURL", *result.BaseURL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	return
}
