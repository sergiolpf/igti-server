// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization views
//
// Command:
// $ goa gen guide.me/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredOrganizationCollection is the viewed result type that is projected
// based on a view.
type StoredOrganizationCollection struct {
	// Type to project
	Projected StoredOrganizationCollectionView
	// View to render
	View string
}

// StoredOrganization is the viewed result type that is projected based on a
// view.
type StoredOrganization struct {
	// Type to project
	Projected *StoredOrganizationView
	// View to render
	View string
}

// StoredOrganizationCollectionView is a type that runs validations on a
// projected type.
type StoredOrganizationCollectionView []*StoredOrganizationView

// StoredOrganizationView is a type that runs validations on a projected type.
type StoredOrganizationView struct {
	// ID is the unique id of the Organization.
	ID *string
	// Name of Organization
	Name *string
	// Company website URL
	URL *string
}

var (
	// StoredOrganizationCollectionMap is a map of attribute names in result type
	// StoredOrganizationCollection indexed by view name.
	StoredOrganizationCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"url",
		},
		"tiny": []string{
			"id",
			"name",
		},
	}
	// StoredOrganizationMap is a map of attribute names in result type
	// StoredOrganization indexed by view name.
	StoredOrganizationMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"url",
		},
		"tiny": []string{
			"id",
			"name",
		},
	}
)

// ValidateStoredOrganizationCollection runs the validations defined on the
// viewed result type StoredOrganizationCollection.
func ValidateStoredOrganizationCollection(result StoredOrganizationCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredOrganizationCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredOrganizationCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredOrganization runs the validations defined on the viewed result
// type StoredOrganization.
func ValidateStoredOrganization(result *StoredOrganization) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredOrganizationView(result.Projected)
	case "tiny":
		err = ValidateStoredOrganizationViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredOrganizationCollectionView runs the validations defined on
// StoredOrganizationCollectionView using the "default" view.
func ValidateStoredOrganizationCollectionView(result StoredOrganizationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredOrganizationView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredOrganizationCollectionViewTiny runs the validations defined on
// StoredOrganizationCollectionView using the "tiny" view.
func ValidateStoredOrganizationCollectionViewTiny(result StoredOrganizationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredOrganizationViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredOrganizationView runs the validations defined on
// StoredOrganizationView using the "default" view.
func ValidateStoredOrganizationView(result *StoredOrganizationView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 200, false))
		}
	}
	if result.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.url", *result.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
	}
	return
}

// ValidateStoredOrganizationViewTiny runs the validations defined on
// StoredOrganizationView using the "tiny" view.
func ValidateStoredOrganizationViewTiny(result *StoredOrganizationView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 200, false))
		}
	}
	return
}
