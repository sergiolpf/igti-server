// Code generated by goa v3.1.1, DO NOT EDIT.
//
// organization service
//
// Command:
// $ goa gen guide.me/design

package organization

import (
	"context"

	organizationviews "guide.me/gen/organization/views"
)

// The Organization service makes it possible to view, add or remove
// Organizations.
type Service interface {
	// List all stored Organizations
	List(context.Context) (res StoredOrganizationCollection, err error)
	// Show Organization by ID
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Show(context.Context, *ShowPayload) (res *StoredOrganization, view string, err error)
	// Add new bottle and return its ID.
	Add(context.Context, *Organization) (res string, err error)
	// Remove Organization from storage
	Remove(context.Context, *RemovePayload) (err error)
	// Update organization with the given IDs.
	Update(context.Context, *StoredOrganization) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "organization"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "show", "add", "remove", "update"}

// StoredOrganizationCollection is the result type of the organization service
// list method.
type StoredOrganizationCollection []*StoredOrganization

// ShowPayload is the payload type of the organization service show method.
type ShowPayload struct {
	// ID of the Organization to show
	ID string
	// View to render
	View *string
}

// StoredOrganization is the result type of the organization service show
// method.
type StoredOrganization struct {
	// ID is the unique id of the Organization.
	ID string
	// Name of Organization
	Name string
	// Company website URL
	URL string
}

// Organization is the payload type of the organization service add method.
type Organization struct {
	// Name of Organization
	Name string
	// Company website URL
	URL string
}

// RemovePayload is the payload type of the organization service remove method.
type RemovePayload struct {
	// ID of Organization to remove
	ID string
}

type ElementNotFound struct {
	// Message of error
	Message string
	// ID of missing element
	ID string
}

// Error returns an error description.
func (e *ElementNotFound) Error() string {
	return ""
}

// ErrorName returns "ElementNotFound".
func (e *ElementNotFound) ErrorName() string {
	return e.Message
}

// NewStoredOrganizationCollection initializes result type
// StoredOrganizationCollection from viewed result type
// StoredOrganizationCollection.
func NewStoredOrganizationCollection(vres organizationviews.StoredOrganizationCollection) StoredOrganizationCollection {
	var res StoredOrganizationCollection
	switch vres.View {
	case "default", "":
		res = newStoredOrganizationCollection(vres.Projected)
	case "tiny":
		res = newStoredOrganizationCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredOrganizationCollection initializes viewed result type
// StoredOrganizationCollection from result type StoredOrganizationCollection
// using the given view.
func NewViewedStoredOrganizationCollection(res StoredOrganizationCollection, view string) organizationviews.StoredOrganizationCollection {
	var vres organizationviews.StoredOrganizationCollection
	switch view {
	case "default", "":
		p := newStoredOrganizationCollectionView(res)
		vres = organizationviews.StoredOrganizationCollection{Projected: p, View: "default"}
	case "tiny":
		p := newStoredOrganizationCollectionViewTiny(res)
		vres = organizationviews.StoredOrganizationCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewStoredOrganization initializes result type StoredOrganization from viewed
// result type StoredOrganization.
func NewStoredOrganization(vres *organizationviews.StoredOrganization) *StoredOrganization {
	var res *StoredOrganization
	switch vres.View {
	case "default", "":
		res = newStoredOrganization(vres.Projected)
	case "tiny":
		res = newStoredOrganizationTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredOrganization initializes viewed result type
// StoredOrganization from result type StoredOrganization using the given view.
func NewViewedStoredOrganization(res *StoredOrganization, view string) *organizationviews.StoredOrganization {
	var vres *organizationviews.StoredOrganization
	switch view {
	case "default", "":
		p := newStoredOrganizationView(res)
		vres = &organizationviews.StoredOrganization{Projected: p, View: "default"}
	case "tiny":
		p := newStoredOrganizationViewTiny(res)
		vres = &organizationviews.StoredOrganization{Projected: p, View: "tiny"}
	}
	return vres
}

// newStoredOrganizationCollection converts projected type
// StoredOrganizationCollection to service type StoredOrganizationCollection.
func newStoredOrganizationCollection(vres organizationviews.StoredOrganizationCollectionView) StoredOrganizationCollection {
	res := make(StoredOrganizationCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredOrganization(n)
	}
	return res
}

// newStoredOrganizationCollectionTiny converts projected type
// StoredOrganizationCollection to service type StoredOrganizationCollection.
func newStoredOrganizationCollectionTiny(vres organizationviews.StoredOrganizationCollectionView) StoredOrganizationCollection {
	res := make(StoredOrganizationCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredOrganizationTiny(n)
	}
	return res
}

// newStoredOrganizationCollectionView projects result type
// StoredOrganizationCollection to projected type
// StoredOrganizationCollectionView using the "default" view.
func newStoredOrganizationCollectionView(res StoredOrganizationCollection) organizationviews.StoredOrganizationCollectionView {
	vres := make(organizationviews.StoredOrganizationCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredOrganizationView(n)
	}
	return vres
}

// newStoredOrganizationCollectionViewTiny projects result type
// StoredOrganizationCollection to projected type
// StoredOrganizationCollectionView using the "tiny" view.
func newStoredOrganizationCollectionViewTiny(res StoredOrganizationCollection) organizationviews.StoredOrganizationCollectionView {
	vres := make(organizationviews.StoredOrganizationCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredOrganizationViewTiny(n)
	}
	return vres
}

// newStoredOrganization converts projected type StoredOrganization to service
// type StoredOrganization.
func newStoredOrganization(vres *organizationviews.StoredOrganizationView) *StoredOrganization {
	res := &StoredOrganization{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	return res
}

// newStoredOrganizationTiny converts projected type StoredOrganization to
// service type StoredOrganization.
func newStoredOrganizationTiny(vres *organizationviews.StoredOrganizationView) *StoredOrganization {
	res := &StoredOrganization{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newStoredOrganizationView projects result type StoredOrganization to
// projected type StoredOrganizationView using the "default" view.
func newStoredOrganizationView(res *StoredOrganization) *organizationviews.StoredOrganizationView {
	vres := &organizationviews.StoredOrganizationView{
		ID:   &res.ID,
		Name: &res.Name,
		URL:  &res.URL,
	}
	return vres
}

// newStoredOrganizationViewTiny projects result type StoredOrganization to
// projected type StoredOrganizationView using the "tiny" view.
func newStoredOrganizationViewTiny(res *StoredOrganization) *organizationviews.StoredOrganizationView {
	vres := &organizationviews.StoredOrganizationView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}
